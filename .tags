!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DECODE_WITH_METHOD	.\z_codec.h	22;"	d
ENCODE_WITH_METHOD	.\z_codec.h	12;"	d
OTA_DUP_MSG	.\SerialApp.h	79;"	d
OTA_SER_BUSY	.\SerialApp.h	80;"	d
OTA_SUCCESS	.\SerialApp.h	78;"	d
SERIALAPP_ACK_DELAY	.\SerialApp.h	74;"	d
SERIALAPP_CLUSTERID1	.\SerialApp.h	67;"	d
SERIALAPP_CLUSTERID2	.\SerialApp.h	68;"	d
SERIALAPP_DEVICEID	.\SerialApp.h	62;"	d
SERIALAPP_DEVICE_VERSION	.\SerialApp.h	63;"	d
SERIALAPP_ENDPOINT	.\SerialApp.h	59;"	d
SERIALAPP_FLAGS	.\SerialApp.h	64;"	d
SERIALAPP_H	.\SerialApp.h	41;"	d
SERIALAPP_MAX_CLUSTERS	.\SerialApp.h	66;"	d
SERIALAPP_NAK_DELAY	.\SerialApp.h	75;"	d
SERIALAPP_PROFID	.\SerialApp.h	61;"	d
SERIALAPP_RESP_EVT	.\SerialApp.h	71;"	d
SERIALAPP_SEND_EVT	.\SerialApp.h	70;"	d
SERIAL_APP_BAUD	.\SerialApp.c	97;"	d	file:
SERIAL_APP_IDLE	.\SerialApp.c	116;"	d	file:
SERIAL_APP_LOOPBACK	.\SerialApp.c	121;"	d	file:
SERIAL_APP_PORT	.\SerialApp.c	93;"	d	file:
SERIAL_APP_RSP_CNT	.\SerialApp.c	129;"	d	file:
SERIAL_APP_RX_SZ	.\SerialApp.c	107;"	d	file:
SERIAL_APP_THRESH	.\SerialApp.c	103;"	d	file:
SERIAL_APP_TX_MAX	.\SerialApp.c	126;"	d	file:
SERIAL_APP_TX_SZ	.\SerialApp.c	111;"	d	file:
SerialApp_CallBack	.\SerialApp.c	/^static void SerialApp_CallBack(uint8 port, uint8 event)$/;"	f	file:
SerialApp_ClusterList	.\SerialApp.c	/^const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =$/;"	v
SerialApp_HandleKeys	.\SerialApp.c	/^void SerialApp_HandleKeys( uint8 shift, uint8 keys )$/;"	f
SerialApp_Init	.\SerialApp.c	/^void SerialApp_Init( uint8 task_id )$/;"	f
SerialApp_MsgID	.\SerialApp.c	/^static uint8 SerialApp_MsgID;$/;"	v	file:
SerialApp_ProcessEvent	.\SerialApp.c	/^UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )$/;"	f
SerialApp_ProcessMSGCmd	.\SerialApp.c	/^void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )$/;"	f
SerialApp_ProcessZDOMsgs	.\SerialApp.c	/^static void SerialApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )$/;"	f	file:
SerialApp_Resp	.\SerialApp.c	/^static void SerialApp_Resp(void)$/;"	f	file:
SerialApp_RspBuf	.\SerialApp.c	/^static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];$/;"	v	file:
SerialApp_RxAddr	.\SerialApp.c	/^static afAddrType_t SerialApp_RxAddr;$/;"	v	file:
SerialApp_Send	.\SerialApp.c	/^static void SerialApp_Send(void)$/;"	f	file:
SerialApp_SimpleDesc	.\SerialApp.c	/^const SimpleDescriptionFormat_t SerialApp_SimpleDesc =$/;"	v
SerialApp_TaskID	.\SerialApp.c	/^uint8 SerialApp_TaskID;    \/\/ Task ID for internal task\/event processing.$/;"	v
SerialApp_TxAddr	.\SerialApp.c	/^static afAddrType_t SerialApp_TxAddr;$/;"	v	file:
SerialApp_TxBuf	.\SerialApp.c	/^static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];$/;"	v	file:
SerialApp_TxLen	.\SerialApp.c	/^static uint8 SerialApp_TxLen;$/;"	v	file:
SerialApp_epDesc	.\SerialApp.c	/^const endPointDesc_t SerialApp_epDesc =$/;"	v
Serial_Test1	.\Sys_Test.h	/^uint8_t Serial_Test1[]     = "Match is ok";$/;"	v
Serial_Test2	.\Sys_Test.h	/^uint8_t Serial_Test2[]     = "Match is not ok";/;"	v
TEST_FLAG	.\Sys_Test.h	/^struct TEST_FLAG{       \/\/ bits   description$/;"	s
ZB_ID_ANN_REG	.\zb_msg.h	/^	ZB_ID_ANN_REG = 0x06,$/;"	e	enum:__anon1
ZB_ID_ANN_RSP	.\zb_msg.h	/^	ZB_ID_ANN_RSP = 0x86,$/;"	e	enum:__anon1
ZB_ID_GET_REQ	.\zb_msg.h	/^	ZB_ID_GET_REQ = 0x02,$/;"	e	enum:__anon1
ZB_ID_GET_RSP	.\zb_msg.h	/^	ZB_ID_GET_RSP = 0x82,$/;"	e	enum:__anon1
ZB_ID_HEARTBEAT	.\zb_msg.h	/^	ZB_ID_HEARTBEAT = 0xFF,$/;"	e	enum:__anon1
ZB_ID_REG_REQ	.\zb_msg.h	/^	ZB_ID_REG_REQ = 0x01,$/;"	e	enum:__anon1
ZB_ID_REG_RSP	.\zb_msg.h	/^	ZB_ID_REG_RSP = 0x81,$/;"	e	enum:__anon1
ZB_ID_SET_REQ	.\zb_msg.h	/^	ZB_ID_SET_REQ = 0x03,$/;"	e	enum:__anon1
ZB_ID_SET_RSP	.\zb_msg.h	/^	ZB_ID_SET_RSP = 0x83,$/;"	e	enum:__anon1
_ZB_MSG_H__	.\zb_msg.h	2;"	d
_Z_CODEC_H__	.\z_codec.h	3;"	d
addr	.\zb_msg.h	/^  uint16_t    addr;$/;"	m	struct:zb_header
cmd	.\zb_msg.h	/^  uint8_t     cmd;$/;"	m	struct:zb_header
cnt	.\zb_msg.h	/^    uint8_t cnt;$/;"	m	struct:zb_ann_reg
count	.\zb_msg.h	/^	uint8_t count;$/;"	m	struct:zb_item_id_list
count	.\zb_msg.h	/^	uint8_t count;$/;"	m	struct:zb_item_pair_list
desc	.\zb_msg.h	/^    char desc[10];$/;"	m	struct:item_desc
dev_type	.\zb_msg.h	/^	uint16_t dev_type;\/\/2$/;"	m	struct:zb_reg_req
flag1	.\Sys_Test.h	/^    uint16_t  flag1:1;     \/\/ 0   KEY2 FLAG$/;"	m	struct:TEST_FLAG
flag2	.\Sys_Test.h	/^    uint16_t  flag2:1;     \/\/ 1    SEQ2 state$/;"	m	struct:TEST_FLAG
flag3	.\Sys_Test.h	/^    uint16_t  flag3:1;     \/\/ 2      reserved$/;"	m	struct:TEST_FLAG
flag4	.\Sys_Test.h	/^    uint16_t  flag4:1;     \/\/ 3  Sequencing counter status $/;"	m	struct:TEST_FLAG
flg1	.\Sys_Test.h	/^    uint16_t flg1: 1;$/;"	m	struct:light_flag
flg2	.\Sys_Test.h	/^    uint16_t flg2: 1;$/;"	m	struct:light_flag
form	.\zb_msg.h	/^    const char *form;$/;"	m	struct:item_desc
func_pamter	.\SerialApp.c	/^uint16_t func_pamter[64];$/;"	v
get_val_by_id	.\SerialApp.c	/^static int get_val_by_id(uint8_t id,uint16_t *val)$/;"	f	file:
hdr	.\zb_msg.h	/^	struct zb_header hdr;$/;"	m	struct:zb_get_req	typeref:struct:zb_get_req::zb_header
hdr	.\zb_msg.h	/^	struct zb_header hdr;$/;"	m	struct:zb_get_rsp	typeref:struct:zb_get_rsp::zb_header
hdr	.\zb_msg.h	/^	struct zb_header hdr;$/;"	m	struct:zb_set_req	typeref:struct:zb_set_req::zb_header
hdr	.\zb_msg.h	/^	struct zb_header hdr;$/;"	m	struct:zb_set_rsp	typeref:struct:zb_set_rsp::zb_header
hdr	.\zb_msg.h	/^	struct zb_header hdr;\/\/14$/;"	m	struct:zb_reg_req	typeref:struct:zb_reg_req::zb_header
hdr	.\zb_msg.h	/^    struct zb_header hdr;$/;"	m	struct:zb_ann_reg	typeref:struct:zb_ann_reg::zb_header
htonl	.\platform.c	/^htonl(uint32_t hostlong)$/;"	f
htons	.\platform.c	/^htons(uint16_t hostshort)$/;"	f
id	.\zb_msg.h	/^	uint8_t *id;$/;"	m	struct:zb_item_id_list
id	.\zb_msg.h	/^	uint8_t id;$/;"	m	struct:zb_item_pair
id	.\zb_msg.h	/^    uint8_t id ;$/;"	m	struct:item_desc
ids	.\zb_msg.h	/^	struct zb_item_id_list ids;$/;"	m	struct:zb_get_req	typeref:struct:zb_get_req::zb_item_id_list
ieee_addr	.\zb_msg.h	/^	uint8_t  ieee_addr[8];\/\/8$/;"	m	struct:zb_reg_req
int16_t	.\platform.h	/^typedef signed short int16_t;$/;"	t
int32_t	.\platform.h	/^typedef signed int int32_t;$/;"	t
int8_t	.\platform.h	/^typedef signed char int8_t;$/;"	t
item	.\zb_msg.h	/^    struct item_desc item;$/;"	m	struct:zb_ann_reg	typeref:struct:zb_ann_reg::item_desc
item_desc	.\zb_msg.h	/^struct item_desc{$/;"	s
len	.\zb_msg.h	/^  uint16_t    len; 			\/* header is not included *\/$/;"	m	struct:zb_header
len_ieee_addr	.\zb_msg.h	53;"	d
light_flag	.\Sys_Test.h	/^struct light_flag$/;"	s
light_flg	.\Sys_Test.h	/^}light_flg;$/;"	v	typeref:struct:light_flag
name	.\zb_msg.h	/^    char name[10];$/;"	m	struct:item_desc
ntohl	.\platform.c	/^ntohl(uint32_t netlong)$/;"	f
ntohs	.\platform.c	/^ntohs(uint16_t netshort)$/;"	f
osalInitTasks	.\OSAL_SerialApp.c	/^void osalInitTasks( void )$/;"	f
pairs	.\zb_msg.h	/^	struct zb_item_pair *pairs;$/;"	m	struct:zb_item_pair_list	typeref:struct:zb_item_pair_list::zb_item_pair
pairs	.\zb_msg.h	/^	struct zb_item_pair_list pairs;$/;"	m	struct:zb_get_rsp	typeref:struct:zb_get_rsp::zb_item_pair_list
pairs	.\zb_msg.h	/^	struct zb_item_pair_list pairs;$/;"	m	struct:zb_set_req	typeref:struct:zb_set_req::zb_item_pair_list
platform_is_big_endian	.\platform.c	/^platform_is_big_endian()$/;"	f
rsvd	.\Sys_Test.h	/^    uint16_t  rsvd:11;         \/\/4--9  reserved  $/;"	m	struct:TEST_FLAG
rsvd	.\Sys_Test.h	/^    uint16_t rsvd: 14;$/;"	m	struct:light_flag
status	.\zb_msg.h	/^	uint8_t status;$/;"	m	struct:zb_set_rsp
syn	.\zb_msg.h	/^  char     syn[8];$/;"	m	struct:zb_header
tasksArr	.\OSAL_SerialApp.c	/^const pTaskEventHandlerFn tasksArr[] = {$/;"	v
tasksCnt	.\OSAL_SerialApp.c	/^const uint8 tasksCnt = sizeof( tasksArr ) \/ sizeof( tasksArr[0] );$/;"	v
tasksEvents	.\OSAL_SerialApp.c	/^uint16 *tasksEvents;$/;"	v
testf1g	.\Sys_Test.h	/^}testf1g;$/;"	v	typeref:struct:TEST_FLAG
type	.\zb_msg.h	/^    uint8_t type;$/;"	m	struct:item_desc
uint16_t	.\platform.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	.\platform.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	.\platform.h	/^typedef unsigned char uint8_t;$/;"	t
val	.\zb_msg.h	/^	uint16_t val;$/;"	m	struct:zb_item_pair
ver	.\zb_msg.h	/^  uint8_t     ver;$/;"	m	struct:zb_header
z_decode_binary	.\z_codec.c	/^int z_decode_binary(char *val, uint32_t val_len, char *buf, uint32_t buf_len)$/;"	f
z_decode_byte	.\z_codec.c	/^z_decode_byte(char *val, char *buf, uint32_t buf_len)$/;"	f
z_decode_integer16	.\z_codec.c	/^z_decode_integer16(uint16_t *val, char *buf, uint32_t buf_len)$/;"	f
z_decode_integer32	.\z_codec.c	/^z_decode_integer32(uint32_t *val, char *buf, uint32_t buf_len)$/;"	f
z_decode_string	.\z_codec.c	/^z_decode_string(char **val, char *buf, uint32_t buf_len)$/;"	f
z_encode_binary	.\z_codec.c	/^int z_encode_binary(char *val,uint32_t val_len,char *buf,uint32_t buf_len)$/;"	f
z_encode_byte	.\z_codec.c	/^z_encode_byte(char val, char *buf, uint32_t buf_len)$/;"	f
z_encode_integer16	.\z_codec.c	/^z_encode_integer16(uint16_t val, char *buf, uint32_t buf_len)$/;"	f
z_encode_integer32	.\z_codec.c	/^z_encode_integer32(uint32_t val, char *buf, uint32_t buf_len)$/;"	f
z_encode_status	.\zb_msg.c	/^z_encode_status(char val, char *buf, uint32_t buf_len)$/;"	f
z_encode_string	.\z_codec.c	/^z_encode_string(const char *val, char *buf, uint32_t buf_len)$/;"	f
z_getlen_binary	.\z_codec.c	/^z_getlen_binary()$/;"	f
z_getlen_byte	.\z_codec.c	/^z_getlen_byte()$/;"	f
z_getlen_integer16	.\z_codec.c	/^z_getlen_integer16()$/;"	f
z_getlen_integer32	.\z_codec.c	/^z_getlen_integer32()$/;"	f
z_getlen_string	.\z_codec.c	/^z_getlen_string(const char *val)$/;"	f
zb_ann_reg	.\zb_msg.h	/^struct zb_ann_reg{$/;"	s
zb_decode_get_req	.\zb_msg.c	/^zb_decode_get_req(struct zb_get_req *val, char *buf, uint32_t buf_len)$/;"	f
zb_decode_header	.\zb_msg.c	/^zb_decode_header(struct zb_header *val, char *buf, uint32_t buf_len)$/;"	f
zb_decode_id_list	.\zb_msg.c	/^zb_decode_id_list(struct zb_item_id_list *val, char *buf, uint32_t buf_len)$/;"	f
zb_decode_pair_list	.\zb_msg.c	/^zb_decode_pair_list(struct zb_item_pair_list *val, char *buf, uint32_t buf_len)$/;"	f
zb_decode_set_req	.\zb_msg.c	/^zb_decode_set_req(struct zb_set_req *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_ann_reg	.\zb_msg.c	/^zb_encode_ann_reg(struct zb_ann_reg *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_desc_item	.\zb_msg.c	/^zb_encode_desc_item(struct item_desc *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_get_req	.\zb_msg.c	/^zb_encode_get_req(struct zb_get_req *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_get_rsp	.\zb_msg.c	/^zb_encode_get_rsp(struct zb_get_rsp *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_header	.\zb_msg.c	/^zb_encode_header(struct zb_header *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_pair_list	.\zb_msg.c	/^zb_encode_pair_list(struct zb_item_pair_list *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_reg_req	.\zb_msg.c	/^zb_encode_reg_req(struct zb_reg_req *val, char *buf, uint32_t buf_len)$/;"	f
zb_encode_set_rsp	.\zb_msg.c	/^zb_encode_set_rsp(struct zb_set_rsp *val, char *buf, uint32_t buf_len)$/;"	f
zb_get_req	.\zb_msg.h	/^struct zb_get_req {$/;"	s
zb_get_rsp	.\zb_msg.h	/^struct zb_get_rsp {$/;"	s
zb_getlen_ann_reg	.\zb_msg.c	/^zb_getlen_ann_reg(struct zb_ann_reg *val)$/;"	f
zb_getlen_get_req	.\zb_msg.c	/^zb_getlen_get_req(struct zb_get_req *val)$/;"	f
zb_getlen_get_rsp	.\zb_msg.c	/^zb_getlen_get_rsp(struct zb_get_rsp *val)$/;"	f
zb_getlen_header	.\zb_msg.c	/^zb_getlen_header(struct zb_header *val)$/;"	f
zb_getlen_id_list	.\zb_msg.c	/^zb_getlen_id_list(struct zb_item_id_list *ids)$/;"	f
zb_getlen_item_pair	.\zb_msg.c	/^zb_getlen_item_pair()$/;"	f
zb_getlen_pair_list	.\zb_msg.c	/^zb_getlen_pair_list(struct zb_item_pair_list *list)$/;"	f
zb_getlen_reg_req	.\zb_msg.c	/^zb_getlen_reg_req(struct zb_reg_req *val)$/;"	f
zb_getlen_set_rsp	.\zb_msg.c	/^zb_getlen_set_rsp(struct zb_set_rsp *val)$/;"	f
zb_getlen_status	.\zb_msg.c	/^zb_getlen_status()$/;"	f
zb_header	.\zb_msg.h	/^struct zb_header {$/;"	s
zb_item_id_list	.\zb_msg.h	/^struct zb_item_id_list {$/;"	s
zb_item_pair	.\zb_msg.h	/^struct zb_item_pair {$/;"	s
zb_item_pair_list	.\zb_msg.h	/^struct zb_item_pair_list {$/;"	s
zb_reg_req	.\zb_msg.h	/^struct zb_reg_req {$/;"	s
zb_set_req	.\zb_msg.h	/^struct zb_set_req {$/;"	s
zb_set_rsp	.\zb_msg.h	/^struct zb_set_rsp {$/;"	s
zb_set_rsp_lenth	.\SerialApp.c	591;"	d	file:
zb_test	.\zb_msg.c	/^zb_test(uint8_t *serial_data,uint8_t value,uint8_t len)$/;"	f
